{"ast":null,"code":"var _jsxFileName = \"/Users/christiancastillo/Desktop/drum-machine/src/components/drum-pad.js\";\nimport React from \"react\";\nimport \"./styles/drum-pad.scss\";\nimport { connect } from \"react-redux\";\nimport { change_power } from \"../redux/actions/power\";\nimport { change_volume } from \"../redux/actions/volume\";\nimport { change_display } from \"../redux/actions/box-display\";\nimport { change_padbank } from \"../redux/actions/banks\";\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      background: '#f349'\n    };\n    this.audioRef = React.createRef();\n    this.play = this.play.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  componentWillMount() {\n    const colors = ['#f39', '#3b27ba', '#13ca91'];\n    var index = Math.floor(Math.random() * 3);\n    this.setState({\n      background: colors[index]\n    });\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  play() {\n    if (this.props.power) {\n      this.audioRef.volume = parseFloat(this.props.volume / 100);\n      this.audioRef.play();\n      this.props.change_display({\n        type: 'BOX_DISPLAY',\n        box_display: this.props.name\n      });\n    }\n  }\n\n  handleKeyPress(event) {\n    if (event.keyCode === this.props.keyCode) {\n      this.play();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"drum-pad\",\n      style: {\n        backgroundColor: this.state.background,\n        boxShadow: `0px 0px 15px ${this.state.background}`\n      },\n      onClick: this.play,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"audio\", {\n      className: \"clip\",\n      id: this.props.keyTrigger,\n      src: this.props.src,\n      ref: audio => {\n        this.audioRef = audio;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, this.props.keyTrigger));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    power: state.power,\n    bank: state.bank,\n    box_display: state.box_display,\n    volume: state.volume\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change_power: state => {\n      dispatch(change_power(state.power));\n    },\n    change_volume: state => {\n      dispatch(change_volume(state.volume));\n    },\n    change_display: state => {\n      dispatch(change_display(state.box_display));\n    },\n    change_bank: state => {\n      dispatch(change_padbank(state.bank));\n    }\n  };\n};\n\nconst DrumPads = connect(mapStateToProps, mapDispatchToProps)(DrumPad);\nexport default DrumPads;","map":{"version":3,"sources":["/Users/christiancastillo/Desktop/drum-machine/src/components/drum-pad.js"],"names":["React","connect","change_power","change_volume","change_display","change_padbank","DrumPad","Component","constructor","props","state","background","audioRef","createRef","play","bind","handleKeyPress","componentWillMount","colors","index","Math","floor","random","setState","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","power","volume","parseFloat","type","box_display","name","event","keyCode","render","backgroundColor","boxShadow","keyTrigger","src","audio","mapStateToProps","bank","mapDispatchToProps","dispatch","change_bank","DrumPads"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles/drum-pad.scss\";\n\n\nimport { connect } from \"react-redux\";\nimport { change_power } from \"../redux/actions/power\";\nimport { change_volume } from \"../redux/actions/volume\";\nimport { change_display } from \"../redux/actions/box-display\";\nimport { change_padbank } from \"../redux/actions/banks\";\n\nclass DrumPad extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbackground: '#f349'\n\t\t};\n\t\tthis.audioRef = React.createRef();\n\t\tthis.play = this.play.bind(this);\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\n\t}\n\n\n\tcomponentWillMount() {\n\t\tconst colors = ['#f39', '#3b27ba', '#13ca91'];\n\t\tvar index = Math.floor(Math.random()*3);\n\t\tthis.setState({\n\t\t\tbackground: colors[index]\n\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener(\"keydown\", this.handleKeyPress);\n\t}\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener(\"keydown\", this.handleKeyPress);\n\t}\n\n\tplay() {\t\t\n\t\tif (this.props.power) {\n\t\t\tthis.audioRef.volume = parseFloat(this.props.volume/100);\n\t\t\tthis.audioRef.play();\n\t\t\tthis.props.change_display({type: 'BOX_DISPLAY', box_display: this.props.name});\n\t\t}\n\t}\n\t\n\thandleKeyPress(event) {\n\t\tif (event.keyCode === this.props.keyCode) {\n\t\t\tthis.play();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"drum-pad\" style={{\n\t\t\t\tbackgroundColor: this.state.background,\n\t\t\t\tboxShadow: `0px 0px 15px ${this.state.background}`\n\t\t\t}} onClick={this.play}>\n\t\t\t\t<audio\n\t\t\t\t\tclassName=\"clip\"\n\t\t\t\t\tid={this.props.keyTrigger}\n\t\t\t\t\tsrc={this.props.src}\n\t\t\t\t\tref={(audio) => {this.audioRef = audio}}\n\t\t\t\t/>\n\t\t\t\t<p className=\"text\">{this.props.keyTrigger}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tpower: state.power,\n\t\tbank: state.bank,\n\t\tbox_display: state.box_display,\n\t\tvolume: state.volume,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tchange_power: (state) => {\n\t\t\tdispatch(change_power(state.power));\n\t\t},\n\t\tchange_volume: (state) => {\n\t\t\tdispatch(change_volume(state.volume));\n\t\t},\n\t\tchange_display: (state) => {\n\t\t\tdispatch(change_display(state.box_display));\n\t\t},\n\t\tchange_bank: (state) => {\n\t\t\tdispatch(change_padbank(state.bank));\n\t\t},\n\t};\n};\nconst DrumPads = connect(mapStateToProps, mapDispatchToProps)(DrumPad);\n\n\nexport default DrumPads;"]},"metadata":{},"sourceType":"module"}